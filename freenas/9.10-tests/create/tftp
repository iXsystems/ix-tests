#!/usr/bin/env bash
# License: BSD
# Location for tests into REST API of FreeNAS 9.10
# Resty Docs: https://github.com/micha/resty
# jsawk: https://github.com/micha/jsawk

# List the other modules which must be run before this module can execute
REQUIRES="storage user"
export REQUIRES

tftp_tests()
{
  local TESTFILE_NAME="tftp-testfile.txt"
  local TESTFILE_PATH="/tmp/"

  set_test_group_text "1 - Create - TFTP tests" "5"
  CLASSNAME=ixbuild.resty.functional.create.tftp

  echo_test_title "Creating dataset ${IXBUILD_ROOT_ZVOL}/tftproot"
  rest_request "POST" "/storage/volume/${IXBUILD_ROOT_ZVOL}/datasets/" '{ "name": "tftproot" }'
  check_rest_response "201 Created" || return 1

  echo_test_title "Setting permissions for TFTP on /mnt/${IXBUILD_ROOT_ZVOL}/tftproot"
  rest_request "PUT" "/storage/permission/" '{ "mp_path": "/mnt/'${IXBUILD_ROOT_ZVOL}'/tftproot", "mp_acl": "unix", "mp_mode": "777", "mp_user": "nobody", "mp_group": "nobody" }'
  check_rest_response "201 Created" || return 1

  echo_test_title "Configuring TFTP service"
  rest_request "PUT" "/services/tftp/" '{ "tftp_directory": "/mnt/'${IXBUILD_ROOT_ZVOL}'/tftproot", "tftp_username": "nobody", "tftp_newfiles": true }'
  check_rest_response "200 OK" || return 1

  echo_test_title "Starting TFTP service"
  rest_request "PUT" "/services/services/tftp/" '{ "srv_enable": true }'
  check_rest_response "200 OK" || return 1

  echo_test_title "Checking to see if TFTP service is enabled"
  rest_request "GET" "/services/services/tftp/"
  check_service_status "RUNNING" || return 1

  #echo_test_title "Fetching status of TFTP status"
  #rc_test "touch '${TESTFILE_PATH}${TESTFILE_NAME}' && atftp -p -l '${TESTFILE_PATH}${TESTFILE_NAME}' ${FNASTESTIP}"
  #check_exit_status
}

# Init function, this is called after module is sourced
# Pre-Set variables
# TESTSET = ( SMOKE / COMPLETE / BENCHMARK )
tftp_init()
{
  # Run all the storage tests
  case $TESTSET in
        SMOKE) tftp_tests ;;
     COMPLETE) tftp_tests ;;
    BENCHMARK) ;;
            *) tftp_tests ;;
  esac
}
