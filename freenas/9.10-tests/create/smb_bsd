#!/usr/bin/env bash
# Author: Kris Moore
# License: BSD
# Location for tests into REST API of FreeNAS 9.10
# Resty Docs: https://github.com/micha/resty
# jsawk: https://github.com/micha/jsawk

# List the other modules which must be run before this module can execute
REQUIRES="storage"
export REQUIRES

smb_bsd_tests()
{
  local DATASET="smb-bsd"
  local SMB_NAME="TestShare"
  local SMB_PATH="/mnt/${IXBUILD_ROOT_ZVOL}/${DATASET}"
  local MOUNTPOINT="/tmp/${BRIDGEHOST}smb-bsd"
  TEST_CNT=22
    
  # Set the group text and number of tests
  set_test_group_text "1 - Create - Samba BSD tests" "${TEST_CNT}"
  CLASSNAME=ixbuild.resty.functional.create.smb_bsd

  # Clean up any leftover items from previous failed AD LDAP or SMB runs
  rest_request "PUT" "/directoryservice/activedirectory/1/" '{ "ad_bindpw": "'${ADPASSWORD}'", "ad_bindname": "'${ADUSERNAME}'", "ad_domainname": "'${BRIDGEDOMAIN}'", "ad_netbiosname_a": "'${BRIDGEHOST}'", "ad_idmap_backend": "rid", "ad_enable":"false" }'
  rest_request "PUT" "/directoryservice/ldap/1/" '{ "ldap_basedn": "'${LDAPBASEDN}'", "ldap_binddn": "'${LDAPBINDDN}'",  "ldap_bindpw": "'${LDAPBINDPASSWORD}'", "ldap_netbiosname_a": "'${BRIDGEHOST}'", "ldap_hostname": "'${LDAPHOSTNAME}'", "ldap_has_samba_schema": true, "ldap_enable": false }'
  rest_request "PUT" "/services/services/cifs/" '{ "srv_enable": false }'
  rest_request "DELETE" "/sharing/cifs/" '{ "cfs_comment": "My Test SMB Share", "cifs_path": "'"${SMB_PATH}"'", "cifs_name": "'"${SMB_NAME}"'", "cifs_guestok": true, "cifs_vfsobjects": "streams_xattr" }'
  rest_request "DELETE" "/storage/volume/1/datasets/${DATASET}/"
  bsd_test "umount -f \"${MOUNTPOINT}\" &>/dev/null; rmdir \"${MOUNTPOINT}\" &>/dev/null"

  # Set auxilary parameters to allow mount_smbfs to work
  echo_test_title "Setting auxilary parameters for mount_smbfs.."
  rest_request "PUT" "/services/cifs/" '{ "cifs_srv_smb_options": "lanman auth = yes\nntlm auth = yes \nraw NTLMv2 auth = yes" }'
  check_rest_response "200 OK"

  echo_test_title "Creating SMB dataset"
  rest_request "POST" "/storage/volume/${IXBUILD_ROOT_ZVOL}/datasets/" '{ "name": "'"${DATASET}"'" }'
  check_rest_response "201 Created"

  echo_test_title "Starting SMB service"
  rest_request "PUT" "/services/services/cifs/" '{ "srv_enable": true }'
  check_rest_response "200 OK"

  echo_test_title "Poll VM to ensure SMB service is up and running"
  wait_for_avail_port "445"
  check_exit_status || return 1

  echo_test_title "Checking to see if SMB service is running"
  rest_request "GET" "/services/services/cifs/"
  check_service_status "RUNNING" || return 1

  echo_test_title "Changing permissions on ${SMB_PATH}"
  rest_request "PUT" "/storage/permission/" '{ "mp_path": "'"${SMB_PATH}"'", "mp_acl": "unix", "mp_mode": "777", "mp_user": "root", "mp_group": "wheel" }'
  check_rest_response "201 Created"

  echo_test_title "Creating a SMB share on ${SMB_PATH}"
  rest_request "POST" "/sharing/cifs/" '{ "cfs_comment": "My Test SMB Share", "cifs_path": "'"${SMB_PATH}"'", "cifs_name": "'"${SMB_NAME}"'", "cifs_guestok": true, "cifs_vfsobjects": "streams_xattr" }'
  check_rest_response "201 Created"

  # Now check if we can mount SMB / create / rename / copy / delete / umount
  echo_test_title "Creating SMB mountpoint"
  bsd_test "mkdir -p \"${MOUNTPOINT}\" && sync"
  check_exit_status || return 1

  echo_test_title "Mounting SMB"
  bsd_test "mount_smbfs -N -I ${BRIDGEIP} \"//guest@testnas/${SMB_NAME}\" \"${MOUNTPOINT}\""
  check_exit_status || return 1

  echo_test_title "Verify that SMB share has been mounted"
  wait_for_bsd_mnt "${MOUNTPOINT}"
  check_exit_status || return 1

  local device_name=`dirname "${MOUNTPOINT}"`
  echo_test_title "Checking permissions on ${MOUNTPOINT}"
  bsd_test "ls -la '${device_name}' | awk '\$4 == \"${VOL_GROUP}\" && \$9 == \"${DATASET}\" ' "
  check_exit_status

  echo_test_title "Creating SMB file"
  bsd_test "touch ${MOUNTPOINT}/testfile"
  check_exit_status || return 1

  echo_test_title "Moving SMB file"
  bsd_test "mv ${MOUNTPOINT}/testfile ${MOUNTPOINT}/testfile2"
  check_exit_status || return 1

  echo_test_title "Copying SMB file"
  bsd_test "cp ${MOUNTPOINT}/testfile2 ${MOUNTPOINT}/testfile"
  check_exit_status || return 1

  echo_test_title "Deleting SMB file 1/2"
  bsd_test "rm ${MOUNTPOINT}/testfile"
  check_exit_status || return 1

  echo_test_title "Deleting SMB file 2/2"
  bsd_test "rm ${MOUNTPOINT}/testfile2"
  check_exit_status || return 1

  echo_test_title "Unmounting SMB"
  bsd_test "umount -f ${MOUNTPOINT}"
  check_exit_status || return 1

  echo_test_title "Removing SMB mountpoint"
  bsd_test "test -d \"${MOUNTPOINT}\" && rmdir \"${MOUNTPOINT}\" || exit 0"
  check_exit_status || return 1

  echo_test_title "Removing SMB share on ${SMB_PATH}"
  rest_request "DELETE" "/sharing/cifs/" '{ "cfs_comment": "My Test SMB Share", "cifs_path": "'"${SMB_PATH}"'", "cifs_name": "'"${SMB_NAME}"'", "cifs_guestok": true, "cifs_vfsobjects": "streams_xattr" }'
  check_rest_response "204"

  # Now stop the service
  echo_test_title "Stopping SMB service"
  rest_request "PUT" "/services/services/cifs/" '{ "srv_enable": false }'
  check_rest_response "200 OK"

  echo_test_title "Verify SMB service is disabled"
  rest_request "GET" "/services/services/cifs/"
  check_service_status "STOPPED"

  # Check destroying a SMB dataset
  echo_test_title "Destroying SMB dataset"
  rest_request "DELETE" "/storage/volume/1/datasets/${DATASET}/"
  check_rest_response "204" || return 1

  return 0
}

# Init function, this is called after module is sourced
# Pre-Set variables
# TESTSET = ( SMOKE / COMPLETE / BENCHMARK )
smb_bsd_init()
{
  # Run all the smb_bsd tests
  case $TESTSET in
        SMOKE) smb_bsd_tests ;;
     COMPLETE) smb_bsd_tests ;;
    BENCHMARK) ;;
            *) smb_bsd_tests ;;
  esac
}
