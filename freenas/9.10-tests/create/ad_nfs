#!/usr/bin/env bash
# Author: Kris Moore
# License: BSD
# Location for tests into REST API of FreeNAS 9.10
# Resty Docs: https://github.com/micha/resty
# jsawk: https://github.com/micha/jsawk

# List the other modules which must be run before this module can execute
REQUIRES="storage"
export REQUIRES

ad_nfs_tests()
{
  local DATASET="ad-nfs"
  local NFS_PATH="/mnt/tank/${DATASET}"
  local MOUNTPOINT="/tmp/${BRIDGEHOST}ad-nfs"
  local NFS_HOST=${ip}
  local NFS_PORT=618
  local MP_GROUP="wheel"

  # Default to BRIDGEIP if set
  if [ -n "${BRIDGEIP}" ]; then
    NFS_HOST=${BRIDGEIP}
  elif [ -z "${NFS_PATH}" -a -n "${FNASTESTIP}" ]; then
    NFS_HOST=${FNASTESTIP}
  fi

  # Set the group text and number of tests
  set_test_group_text "1 - Create - AD NFS tests" "24"
  CLASSNAME=ixbuild.resty.functional.create.ad_nfs

  echo -n "AD NFS tests are disabled." && echo_skipped
  return 0

  # Clean up any leftover items from previous failed NFS runs
  rest_request "PUT" "/directoryservice/activedirectory/1/" '{ "ad_bindpw": "'${ADPASSWORD}'", "ad_bindname": "'${ADUSERNAME}'", "ad_domainname": "'${BRIDGEDOMAIN}'", "ad_netbiosname_a": "'${BRIDGEHOST}'", "ad_idmap_backend": "rid", "ad_enable":"false" }'
  rest_request "PUT" "/directoryservice/ldap/1/" '{ "ldap_basedn": "'${LDAPBASEDN}'", "ldap_binddn": "'${LDAPBINDDN}'",  "ldap_bindpw": "'${LDAPBINDPASSWORD}'", "ldap_netbiosname_a": "'${BRIDGEHOST}'", "ldap_hostname": "'${LDAPHOSTNAME}'", "ldap_has_samba_schema": true, "ldap_enable": false }'
  rest_request "DELETE" "/sharing/nfs/" '{ "nfs_comment": "My Test Share", "nfs_paths": ["'"${NFS_PATH}"'"], "nfs_security": "sys" }'
  rest_request "DELETE" "/storage/volume/1/datasets/${DATASET}/"
  rest_request "PUT" "/services/services/nfs/" '{ "srv_enable": false }'
  bsd_test "umount -f \"${MOUNTPOINT}\"; rmdir \"${MOUNTPOINT}\""

  # Create a dataset to use with NFS
  echo_test_title "Creating dataset ${DATASET}"
  rest_request "POST" "/storage/volume/tank/datasets/" '{ "name": "'"${DATASET}"'" }'
  check_rest_response "201 Created" || return 1

  # Set the permissions of the dataset
  echo_test_title "Changing permissions on ${NFS_PATH}"
  rest_request "PUT" "/storage/permission/" '{ "mp_path": "'"${NFS_PATH}"'", "mp_acl": "unix", "mp_mode": "777", "mp_user": "root", "mp_group": "'"${MP_GROUP}"'" }'
  check_rest_response "201 Created" || return 1

  # Enable NFS server
  echo_test_title "Creating the NFS server"
  rest_request "PUT" "/services/nfs/" '{ "nfs_srv_bindip": "'"${NFS_HOST}"'", "nfs_srv_mountd_port": '${NFS_PORT}', "nfs_srv_allow_nonroot": false, "nfs_srv_servers": 10, "nfs_srv_udp": false, "nfs_srv_rpcstatd_port": 871, "nfs_srv_rpclockd_port": 32803, "nfs_srv_v4": false, "nfs_srv_v4_krb": false, "id": 1 }'
  check_rest_response "200 OK"

  # Check creating a NFS share
  echo_test_title "Creating a NFS share on ${NFS_PATH}"
  rest_request "POST" "/sharing/nfs/" '{ "nfs_comment": "My Test Share", "nfs_paths": ["'"${NFS_PATH}"'"], "nfs_security": "sys" }'
  check_rest_response "201 Created"

  # Now start the service
  echo_test_title "Starting NFS service"
  rest_request "PUT" "/services/services/nfs/" '{ "srv_enable": true }'
  check_rest_response "200 OK"

  # Give NFS time to start
  echo_test_title "Verify that the NFS port is open on the host"
  wait_for_avail_port "${NFS_PORT}"
  check_exit_status || return 1

  echo_test_title "Verify that nfsd shows up in netstat results"
  ssh_test "netstat -lap tcp | awk '\$4 == \"${NFS_HOST}.nfsd\" && (\$6 == \"LISTEN\" || \$6 == \"ESTABLISHED\")' | grep -q nfsd"
  check_exit_status || return 1

  echo_test_title "Verify NFS on host in showmount results"
  wait_for_fnas_mnt "${NFS_PATH}" "Everyone"
  check_exit_status || return 1

  echo_test_title "Checking to see if NFS service is enabled"
  rest_request "GET" "/services/services/nfs/"
  check_service_status "RUNNING" || return 1

  #echo_test_title "Checking permissions on ${NFS_PATH}"
  #check_dataset_group "${NFS_PATH}" "${MP_GROUP}"

  # Now check if we can mount NFS / create / rename / copy / delete / umount
  echo_test_title "Creating NFS mountpoint"
  bsd_test "mkdir -p '${MOUNTPOINT}'"
  check_exit_status || return 1

  echo_test_title "Mounting NFS share ${NFS_PATH} to ${MOUNTPOUNT}"
  bsd_test "mount_nfs ${NFS_HOST}:${NFS_PATH} ${MOUNTPOINT}" "umount '${MOUNTPOINT}' ; rmdir '${MOUNTPOINT}'" "60"
  check_exit_status || return 1

  echo_test_title "Verify that the NFS share has been mounted"
  wait_for_bsd_mnt "${MOUNTPOINT}"
  check_exit_status || return 1

  echo_test_title "Checking for ability to list files on volume"
  bsd_test "time ls -la '${MOUNTPOINT}'"
  check_exit_status || return 1

  # Create 20 directories on the NFS share, using a different AD group for each
  local DIR_CNT=20
  for count in $(seq -f "%2g" 1 $DIR_CNT)
  do
    echo_test_title "Creating directory on NFS share \"${NFS_PATH}/test_$count\""
    ssh_test "mkdir \"${NFS_PATH}/test_$count\""
    check_exit_status

    echo_test_title "Changing permissions for directory on NFS share \"${NFS_PATH}/test_$count\""
    ssh_test "chown root:group$count \"${NFS_PATH}/test_$count\" && chmod -R 070 \"${NFS_PATH}/test_$count\""
    check_exit_status

    echo_test_title "Checking permissions for directory on NFS share \"${NFS_PATH}/test_$count\""
    bsd_test "cd \"${MOUNTPOINT}/test_$COUNT\" && ls -a ."
    check_exit_status
  done

  echo_test_title "Unmounting NFS"
  bsd_test "umount -f '${MOUNTPOINT}'"
  check_exit_status || return 1

  echo_test_title "Removing NFS mountpoint"
  bsd_test "rmdir '${MOUNTPOINT}'" || return 1

  echo_test_title "Removing NFS share on ${NFS_PATH}"
  rest_request "DELETE" "/sharing/nfs/" '{ "nfs_comment": "My Test Share", "nfs_paths": ["'"${NFS_PATH}"'"], "nfs_security": "sys" }'
  check_rest_response "204"

  echo_test_title "Stopping NFS service"
  rest_request "PUT" "/services/services/nfs/" '{ "srv_enable": false }'
  check_rest_response "200 OK"

  echo_test_title "Verifying NFS service is disabled"
  rest_request "GET" "/services/services/nfs/"
  check_service_status "STOPPED"

  echo_test_title "Destroying NFS dataset ${DATASET}"
  rest_request "DELETE" "/storage/volume/1/datasets/${DATASET}/"
  check_rest_response "204" || return 1

  return 0
}

# Init function, this is called after module is sourced
# Pre-Set variables
# TESTSET = ( SMOKE / COMPLETE / BENCHMARK )
ad_nfs_init()
{
  # Run all the nfs tests
  case $TESTSET in
        SMOKE) ad_nfs_tests ;;
     COMPLETE) ad_nfs_tests ;;
    BENCHMARK) ;;
            *) ad_nfs_tests ;;
  esac
}

