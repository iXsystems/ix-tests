#!/usr/bin/env bash
# Author: Joe Maloney
# License: BSD
# Location for tests into REST API of FreeNAS 9.10
# Resty Docs: https://github.com/micha/resty
# jsawk: https://github.com/micha/jsawk

# List the other modules which must be run before this module can execute
REQUIRES=""
export REQUIRES

ldap_bsd_tests()
{
  local DATASET="ldap-bsd"
  local SMB_NAME="TestShare"
  local SMB_PATH="/mnt/tank/${DATASET}"
  local MOUNTPOINT="/tmp/ldap-mnt.$$"
  local LDAP_USER='ldapuser'
  local VOL_GROUP="qa"

  set_test_group_text "2 - Update - LDAP BSD tests" "27"
  CLASSNAME=ixbuild.resty.functional.update.ldap_bsd

  if [ -z "$LDAPBINDDN2" -o -z "$LDAPBINDPASSWORD2" ] ; then
     echo -n "Missing the LDAPBINDDN2 / LDAPBINDPASSWORD2 settings, test skipped.."
     echo_skipped
     add_xml_result "skipped" "Skipped due to missing LDAP settings"
     return 0
  fi

  # Clean up any leftover items from previous failed AD LDAP or SMB runs
  rest_request "PUT" "/directoryservice/activedirectory/1/" '{ "ad_bindpw": "'${ADPASSWORD}'", "ad_bindname": "'${ADUSERNAME}'", "ad_domainname": "'${BRIDGEDOMAIN}'", "ad_netbiosname_a": "'${BRIDGEHOST}'", "ad_idmap_backend": "rid", "ad_enable":"false" }'
  rest_request "PUT" "/directoryservice/ldap/1/" '{ "ldap_basedn": "'${LDAPBASEDN}'", "ldap_anonbind": false, "ldap_netbiosname_a": "'${BRIDGEHOST}'", "ldap_hostname": "'${LDAPHOSTNAME}'", "ldap_has_samba_schema": true, "ldap_enable": false }'
  rest_request "PUT" "/services/services/cifs/" '{ "srv_enable": false }'
  rest_request "DELETE" "/sharing/cifs/" '{ "cfs_comment": "My Test SMB Share", "cifs_path": "'"${SMB_PATH}"'", "cifs_name": "'"${SMB_NAME}"'", "cifs_guestok": true, "cifs_vfsobjects": "streams_xattr" }'
  rest_request "DELETE" "/storage/volume/1/datasets/${DATASET}/"
  umount -A &>/dev/null
  rmdir /tmp/ldap-mnt.* &>/dev/null

  # Set auxilary parameters to allow mount_smbfs to work with ldap
  echo_test_title "Set auxilary parameters for mount_smbfs.."
  rest_request "PUT" "/services/cifs/" '{ "cifs_srv_smb_options": "lanman auth = yes\nntlm auth = yes \nraw NTLMv2 auth = yes" }'
  check_rest_response "200 OK"

  echo_test_title "Creating SMB dataset"
  rest_request "POST" "/storage/volume/tank/datasets/" '{ "name": "'"${DATASET}"'" }'
  check_rest_response "201 Created"  

  # Enable LDAP
  echo_test_title "Enabling LDAP.."
  rest_request "PUT" "/directoryservice/ldap/1/" '{ "ldap_basedn": "'${LDAPBASEDN2}'", "ldap_binddn": "'${LDAPBINDDN2}'", "ldap_bindpw": "'${LDAPBINDPASSWORD2}'", "ldap_netbiosname_a": "'${BRIDGEHOST}'", "ldap_hostname": "'${LDAPHOSTNAME2}'", "ldap_has_samba_schema": true, "ldap_enable": true }'
  check_rest_response "200 OK"

  # Check LDAP
  echo_test_title "Checking LDAP.."
  rest_request GET "/directoryservice/ldap/"
  check_property_value "return this.ldap_enable" "true" || return 1

  echo_test_title "Enabling SMB service"
  rest_request "PUT" "/services/cifs/" '{ "cifs_srv_description": "Test FreeNAS Server", "cifs_srv_guest": "nobody", "cifs_hostname_lookup": false, "cifs_srv_aio_enable": false }'
  check_rest_response "200 OK"

  # Now start the service
  echo_test_title "Starting SMB service"
  rest_request "PUT" "/services/services/cifs/" '{ "srv_enable": true }'
  check_rest_response "200 OK"

  # Wait a moment for samba to spin up
  echo_test_title "Poll VM to ensure SMB service is up and running"
  wait_for_avail_port "445"
  check_exit_status || return 1

  echo_test_title "Checking to see if SMB service is enabled"
  rest_request "GET" "/services/services/cifs/"
  check_service_status "RUNNING"

  echo_test_title "Changing permissions on ${SMB_PATH}"
  rest_request "PUT" "/storage/permission/" '{ "mp_path": "'"${SMB_PATH}"'", "mp_acl": "unix", "mp_mode": "777", "mp_user": "root", "mp_group": "qa", "mp_recursive": true }'
  check_rest_response "201 Created"   

  echo_test_title "Creating a SMB share on ${SMB_PATH}"
  rest_request "POST" "/sharing/cifs/" '{ "cfs_comment": "My Test SMB Share", "cifs_path": "'"${SMB_PATH}"'", "cifs_name": "'"${SMB_NAME}"'", "cifs_guestok": true, "cifs_vfsobjects": "streams_xattr" }'
  check_rest_response "201 Created"

  return 0

  # Now check if we can mount SMB / create / rename / copy / delete / umount
  echo_test_title "Creating SMB mountpoint"
  rc_test "mkdir '${MOUNTPOINT}'" || return 1
  sync

  sleep 10

  # Store credentials file for mount_smb
  # The LDAPUSER user must exist in LDAP with this password
  echo "[TESTNAS:LDAPUSER]" > ~/.nsmbrc
  echo password=12345678 >> ~/.nsmbrc

  echo_test_title "Mounting SMB"
  rc_test "mount_smbfs -N -I ${ip} -W LDAP02 '//${LDAP_USER}@testnas/${SMB_NAME}' '${MOUNTPOINT}'" || return 1

  echo_test_title "Verify SMB share has finished mounting"
  wait_for_bsd_mnt "${MOUNTPOINT}"
  check_exit_status || return 1

  local device_name=`dirname "${MOUNTPOINT}"`
  echo_test_title "Checking permissions on ${MOUNTPOINT}"
  rc_test "ls -la '${device_name}' | awk '\$4 == \"${VOL_GROUP}\" && \$9 == \"${DATASET}\" ' "

  echo_test_title "Creating SMB file"
  rc_test "touch '${MOUNTPOINT}/testfile'" || return 1

  echo_test_title "Moving SMB file"
  rc_test "mv '${MOUNTPOINT}/testfile' '${MOUNTPOINT}/testfile2'" || return 1

  echo_test_title "Copying SMB file"
  rc_test "cp '${MOUNTPOINT}/testfile2' '${MOUNTPOINT}/testfile'" || return 1

  echo_test_title "Deleting SMB file 1/2"
  rc_test "rm '${MOUNTPOINT}/testfile'" || return 1

  echo_test_title "Deleting SMB file 2/2"
  rc_test "rm '${MOUNTPOINT}/testfile2'" || return 1

  echo_test_title "Unmounting SMB"
  rc_test "umount '${MOUNTPOINT}'" || return 1

  echo_test_title "Removing SMB mountpoint"
  rc_test "rmdir '${MOUNTPOINT}'" || return 1

  echo_test_title "Removing SMB share on ${SMB_PATH}"
  rest_request "DELETE" "/sharing/cifs/" '{ "cfs_comment": "My Test SMB Share", "cifs_path": "'"${SMB_PATH}"'", "cifs_name": "'"${SMB_NAME}"'", "cifs_guestok": true, "cifs_vfsobjects": "streams_xattr" }'
  check_rest_response "204"

  # Disable LDAP
  echo_test_title "Disabling LDAP.."
  rest_request "PUT" "/directoryservice/ldap/1/" '{ "ldap_basedn": "'${LDAPBASEDN2}'", "ldap_binddn": "'${LDAPBINDDN2}'", "ldap_bindpw": "'${LDAPBINDPASSWORD2}'", "ldap_netbiosname_a": "'${BRIDGEHOST}'", "ldap_hostname": "'${LDAPHOSTNAME2}'", "ldap_has_samba_schema": true, "ldap_enable": false }'
  check_rest_response "200 OK"

  # Now stop the SMB service
  echo_test_title "Stopping SMB service"
  rest_request "PUT" "/services/services/cifs/" '{ "srv_enable": false }'
  check_rest_response "200 OK"

  # Check LDAP
  echo_test_title "Verify LDAP is disabled.."
  rest_request GET "/directoryservice/ldap/"
  check_property_value "return this.ldap_enable" "false" || return 1

  echo_test_title "Verify SMB service has shut down"
  rest_request "GET" "/services/services/cifs/"
  check_service_status "STOPPED" || return 1

  # Check destroying a SMB dataset
  echo_test_title "Destroying SMB dataset"
  rest_request "DELETE" "/storage/volume/1/datasets/${DATASET}/"
  check_rest_response "204" || return 1

  return 0
}

# Init function, this is called after module is sourced
# Pre-Set variables
# TESTSET = ( SMOKE / COMPLETE / BENCHMARK )
ldap_bsd_init()
{
  # Run all the tests
  case $TESTSET in
        SMOKE) ldap_bsd_tests ; return $? ;;
     COMPLETE) ldap_bsd_tests ; return $? ;;
    BENCHMARK) ;;
            *) ldap_bsd_tests ; return $? ;;
  esac
}
