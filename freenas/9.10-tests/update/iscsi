#!/usr/bin/env bash
# Author: Kris Moore
# License: BSD
# Location for tests into REST API of FreeNAS 9.10
# Resty Docs: https://github.com/micha/resty
# jsawk: https://github.com/micha/jsawk

# List the other modules which must be run before this module can execute
REQUIRES="update_storage"
export REQUIRES

iscsi_tests()
{
  local MOUNTPOINT="/tmp/iscsi-mnt.$$"

  # Set the group text and number of tests
  set_test_group_text "2 - Update - iSCSI tests" "16"
  CLASSNAME=ixbuild.resty.functional.update.iscsi

  # TODO - Find correct process name on test executor
  #ps -aux | grep -q "[i]scsid"
  #if [ $? -ne 0 ]; then
  #  echo -n "iSCSI service does not appear to be running."
  #  echo_skipped
  #  return 0
  #fi  

  # Clean up any leftover items from any previous failed runs
  rest_request "PUT" "/services/services/iscsitarget/" '{ "srv_enable": "false" }'
  iscsictl -R -a
  umount -A &>/dev/null
  rmdir /tmp/iscsi-mnt.* &>/dev/null

  # Enable the iSCSI service
  echo_test_title "Enable iSCSI service"
  rest_request "PUT" "/services/services/iscsitarget/" '{ "srv_enable": "true" }'
  check_rest_response "200 OK"

  echo_test_title "Verify the iSCSI service is enabled"
  rest_request "GET" "/services/services/iscsitarget/"
  check_service_status "RUNNING"

  return 0

  echo_test_title "Poll VM to ensure iSCSI service is up and running"
  wait_for_avail_port "3260"
  check_exit_status || return 1

  # Now connect to iSCSI target
  echo_test_title "Connecting to iSCSI target"
  bsd_test "iscsictl -A -p ${ip}:3620 -t iqn.2005-10.org.freenas.ctl:target0" || return 1
 
  echo_test_title "Waiting for iscsi connection before grabbing device name"
  # -w[aits] 30 seconds before timing out, holding for all iscsi connections to
  # have been established before -L[isting] results
  bsd_test "iscsictl -L -w 30" || return 1

  # Get the device for the connect target
  local iscsi_devname=`iscsictl -L | awk '$2 == "'${ip}':3620" && $3 == "Connected:" {print $4}'`

  echo_test_title "Ensure we have the iSCSI device name"
  test -n "${iscsi_devname}" && ls "/dev/${iscsi_devname}" >/dev/null
  check_exit_status || return 1

  # Now check if we can mount target / create / rename / copy / delete / umount

  echo_test_title "Creating iSCSI mountpoint"
  bsd_test "mkdir '${MOUNTPOINT}'" || return 1

  echo_test_title "Mount the target volume"
  bsd_test "mount /dev/${iscsi_devname} '${MOUNTPOINT}'" || return 1

  echo_test_title "Creating 45MB file to verify vzol size increase"
  bsd_test "dd if=/dev/zero of=/tmp/45Mfile.img bs=1M count=45" || return 1

  echo_test_title "Moving 45MB file to verify vzol size increase"
  bsd_test "mv /tmp/45Mfile.img '${MOUNTPOINT}/testfile1'" || return 1

  echo_test_title "Deleting file"
  bsd_test "rm '${MOUNTPOINT}/testfile1'" || return 1

  echo_test_title "Unmounting iSCSI volume"
  bsd_test "umount '${MOUNTPOINT}'" || return 1

  echo_test_title "Removing iSCSI volume mountpoint"
  bsd_test "rmdir '${MOUNTPOINT}'" || return 1

  echo_test_title "Disconnect all targets"
  bsd_test "iscsictl -R -a" || return 1

  # Disable the iSCSI service
  echo_test_title "Disable iSCSI service"
  rest_request "PUT" "/services/services/iscsitarget/" '{ "srv_enable": "false" }' 
  check_rest_response "200 OK"

  echo_test_title "Verify the iSCSI service is disabled"
  rest_request "GET" "/services/services/iscsitarget/"
  check_service_status "STOPPED"

  return 0
}

# Init function, this is called after module is sourced
# Pre-Set variables
# TESTSET = ( SMOKE / COMPLETE / BENCHMARK )
iscsi_init()
{
  # Run all the storage tests
  case $TESTSET in
        SMOKE) iscsi_tests ;;
     COMPLETE) iscsi_tests ;;
    BENCHMARK) ;;
            *) iscsi_tests ;;
  esac
}
